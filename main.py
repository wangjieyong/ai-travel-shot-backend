import os
import logging
import base64
import uuid
import io
from fastapi import FastAPI, File, UploadFile, Form, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import google.generativeai as genai
import vertexai
from vertexai.preview.vision_models import ImageGenerationModel
from google.cloud import storage
from PIL import Image
from rembg import remove

# --- 配置 ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
API_KEY = os.getenv("GOOGLE_API_KEY_NEW") or os.getenv("GOOGLE_API_KEY")
PROJECT_ID = "ai-travel-shot-final"
REGION = "us-central1"
BUCKET_NAME = "ai-travel-shot-images"

# --- 初始化 ---
if API_KEY:
    genai.configure(api_key=API_KEY)
    logger.info("✅ Google Gemini API configured.")
try:
    vertexai.init(project=PROJECT_ID, location=REGION)
    logger.info("✅ Vertex AI initialized.")
    storage_client = storage.Client()
    bucket = storage_client.bucket(BUCKET_NAME)
    logger.info(f"✅ Google Cloud Storage connected to bucket: {BUCKET_NAME}")
except Exception as e:
    logger.error(f"❌ FATAL: Initialization failed: {e}")

app = FastAPI(title="AI Travel Shot Backend - Final with Storage", version="2.1.0")

# --- CORS配置 ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://ai-travel-shot-final.web.app", "https://ai-travel-shot-final.firebaseapp.com", "http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

# --- AI 辅助函数 ---
async def create_prompt_from_coords_gemini(lat: float, lng: float) -> str:
    # 保持不变
    ...
    return response.text.strip()

def generate_and_upload_image(prompt: str) -> BytesIO:
    # 修改：这个函数现在返回BytesIO而不是URL
    logger.info("Requesting image from Imagen...")
    model = ImageGenerationModel.from_pretrained("imagegeneration@006")
    response = model.generate_images(prompt=prompt, number_of_images=1, aspect_ratio="1:1")

    if not response or not response.images:
        raise Exception("Imagen 2 failed to generate an image.")
    
    image_bytes = response[0]._image_bytes
    logger.info("✅ Image generated by Imagen 2.")
    return BytesIO(image_bytes)

# 新增：图像处理和融合函数
def composite_images(background_image_stream: BytesIO, foreground_image_stream: BytesIO) -> BytesIO:
    """
    将前景图（人物）叠加到背景图（AI生成风景）上
    """
    logger.info("开始合成图像...")

    # 1. 移除前景图的背景
    logger.info("正在进行背景移除...")
    input_image = Image.open(foreground_image_stream).convert("RGBA")
    output_image_with_alpha = remove(input_image)
    logger.info("✅ 背景移除完成。")

    # 2. 加载背景图
    background = Image.open(background_image_stream).convert("RGBA")
    
    # 3. 调整前景图大小并计算位置
    # 假设前景图是人物，将其按比例缩小到背景图的一半宽度
    foreground_width = int(background.width * 0.5)
    foreground_height = int(output_image_with_alpha.height * foreground_width / output_image_with_alpha.width)
    foreground_resized = output_image_with_alpha.resize((foreground_width, foreground_height), Image.LANCZOS)
    
    # 将人物放置在底部中央
    paste_x = (background.width - foreground_resized.width) // 2
    paste_y = background.height - foreground_resized.height
    
    # 4. 叠加图像
    background.alpha_composite(foreground_resized, dest=(paste_x, paste_y))
    
    # 5. 保存为PNG格式到内存中
    final_image_stream = io.BytesIO()
    background.convert("RGB").save(final_image_stream, format='PNG')
    final_image_stream.seek(0)
    
    logger.info("✅ 图像合成完成。")
    return final_image_stream

# --- API 接口 ---
@app.get("/")
def read_root():
    return {"message": "AI Travel Shot Backend is ready! (Cloud Storage Integrated)"}

@app.post("/generate")
async def generate_travel_shot(
    image: UploadFile = File(...), 
    lat: float = Form(...), 
    lng: float = Form(...)
):
    if not API_KEY:
        raise HTTPException(status_code=500, detail="Server API key not configured.")
    
    try:
        # 1. 生成图像描述提示词
        image_prompt = await create_prompt_from_coords_gemini(lat, lng)
        
        # 2. 生成背景图像
        background_image_stream = generate_and_upload_image(image_prompt)
        
        # 3. 读取用户上传的图片
        user_image_stream = io.BytesIO(await image.read())
        
        # 4. 图像融合
        final_image_stream = composite_images(background_image_stream, user_image_stream)
        
        # 5. 上传最终成品到云存储
        file_name = f"final/{uuid.uuid4()}.png"
        blob = bucket.blob(file_name)
        blob.upload_from_file(final_image_stream, content_type='image/png')
        image_url = blob.public_url
        logger.info(f"✅ 最终图像上传成功，URL: {image_url}")
        
        return {
            "success": True,
            "imageUrl": image_url,
            "generated_prompt": image_prompt
        }
    except Exception as e:
        logger.error(f"Error during generation: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"AI generation failed: {str(e)}")